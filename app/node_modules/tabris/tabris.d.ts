// Type definitions for Tabris.js 2.0.0-rc1
/// <reference path="console.d.ts" />
/// <reference path="localStorage.d.ts" />
/// <reference path="timer.d.ts" />
/// <reference path="whatwg-fetch.d.ts" />
/// <reference path="Event.d.ts" />
/// <reference path="XMLHttpRequest.d.ts" />

type Partial<T> = {
  [P in keyof T]?: T[P];
};

export as namespace tabris;


/**
 * Represents pixel data of a `Canvas` widget.
 */
interface ImageData {

  /**
   * A one-dimensional array containing the data in the RGBA order, with integer values between 0 and 255 (included).
   */
  readonly data: Uint8ClampedArray;

  /**
   * The actual height of the ImageData, in pixels.
   */
  readonly width: number;

  /**
   * The actual height of the ImageData, in pixels.
   */
  readonly height: number;

}

type Image = string | {

  /**
   * Image path or URL.
   */
  src: string;

  /**
   * Image width, extracted from the image file when missing.
   */
  width?: number;

  /**
   * Image height, extracted from the image file when missing.
   */
  height?: number;

  /**
   * Image scale factor - the image will be scaled down by this factor.
   * Ignored when width or height are set.
   */
  scale?: number;
}

/**
 * Colors are specified as strings using one of the following formats:
 *
 * - **"#xxxxxx"**
 * - **"#xxx"**
 * - **"#xxxxxxxx"**
 * - **"#xxxx"**
 * - **"rgb(r, g, b)"** with **r**, **g** and **b** being numbers in the range 0..255.
 * - **"rgba(r, g, b, a)"** with **a** being a number in the range 0..1.
 * - a color name from the CSS3 specification.
 * - **"transparent"** sets a fully transparent color. This is a shortcut for **"rgba(0, 0, 0, 0)"**.
 * - **"initial"** resets the color to its (platform-dependent) default.
 */
type Color = string;

/**
 * Fonts are specified as strings using the shorthand syntax known from CSS, specifically **"[font-style] [font-weight] font-size [font-family[, font-family]*]"**. The font family may be omitted, in this case the default system font will be used. Generic font families supported across all platforms are **"serif"**, **"sans-serif"**, **"condensed"** and **"monospace"**. Supported font weights are **"light"**, **"thin"**, **"normal"**, **"medium"**, **"bold"** and **"black"**. The value **"initial"** represents the platform default.
 */
type Font = string;

/**
 * Defines how the widget should be arranged. When setting the layout of a widget using **LayoutData**, all currently set layout attributes not in the new LayoutData object will be implicitly reset to null (i.e. "not specified").
 */
interface LayoutData {
    left?: margin;
    right?: margin;
    top?: margin;
    bottom?: margin;
    centerX?: offset;
    centerY?: offset;
    baseline?: Widget | Selector;
    width?: dimension;
    height?: dimension;
}

/**
 * A Widget's bounds
 */
interface Bounds {

  /**
   * the horizontal offset from the parent's left edge in dip
   */
  left: number;

  /**
   * the vertical offset from the parent's top edge in dip
   */
  top: number;

  /**
   * the width of the widget in dip
   */
  width: number;

  /**
   * the height of the widget in dip
   */
  height: number;

}

interface Transformation {

  /**
   * Clock-wise rotation in radians. Defaults to \`0\`.
   */
   rotation?: number;

  /**
   * Horizontal scale factor. Defaults to \`1\`.
   */
  scaleX?: number;

  /**
   * Vertical scale factor. Defaults to \`1\`.
   */
  scaleY?: number;

  /**
   * Horizontal translation (shift) in dip. Defaults to \`0\`.
   */
  translationX?: number;

  /**
   * Vertical translation (shift) in dip. Defaults to \`0\`.
   */
  translationY?: number;

  /**
   * Z-axis translation (shift) in dip. Defaults to \`0\`. Android 5.0+ only.
   */
  translationZ?: number;

}

/**
 * An expression or a predicate function to select a set of widgets.
 */
type Selector = string | SelectorFunction;
type SelectorFunction = (widget: Widget) => boolean;

/**
 * A positive float, or 0, representing device independent pixels.
 */
type dimension = number;
/**
 * A positive or negative float, or 0, representing device independent pixels.
 */
type offset = number;

/**
 * Distance to a parent's or sibling's opposing edge in one of these formats:
 * - **offset** the distance from the parent's opposing edge in device independent pixels
 * - **percentage** the distance from the parent's opposing edge in percent of the parent's width
 * - **Widget** attach this edge to the given siblings's opposing edge
 * - **"selector"**
 * - **"prev()"** Same as above, but as space-separated string list instead of array
 * - **"selector offset"**
 * - **"prev() offset"**
 * - **[Widget, offset]** the distance from the given widget's opposing edge in pixel
 * - **"Widget, offset"**Same as above, but as space-separated string list instead of array.
 * - **[percentage, offset]** the distance from the parent's opposing edge in percent of the parent's width plus a fixed offset in pixels
 * - **"percentage offset"** Same as above, but as space-separated string list instead of array
 * - **[selector, offset]**
 * - **["prev()", offset]**
 */
type margin = any;

interface AnimationOptions {

  /**
   * Time until the animation starts in ms, defaults to 0.
   */
  delay?: number;

  /**
   * Duration of the animation in ms.
   */
  duration?: number;

  /**
   *  Easing function applied to the animation.
   */
  easing?: "linear"|"ease-in"|"ease-out"|"ease-in-out";

  /**
   *  Number of times to repeat the animation, defaults to 0.
   */
  repeat?: number;

  /**
   *  If true, alternates the direction of the animation on every repeat.
   */
  reverse?: boolean;

  /**
   * no effect, but will be given in animation events.
   */
  name?: string;
}


// AlertDialog

interface _AlertDialogProperties extends _NativeObjectProperties {

  /**
   * An object with the texts of the buttons to display. There are up to three buttons: `ok`, `cancel` and
   * `neutral`. If no text is given for a button it will not be displayed. Example: `{ok: 'Yes', cancel:
   * 'No'}` shows 'Yes' and 'No', but no 'neutral' button.
   */
  buttons: {ok?: string, cancel?: string, neutral?: string};

  /**
   * The message to display inside the dialog.
   */
  message: string;

  /**
   * The title of the dialog.
   */
  title: string;
}
type AlertDialogProperties = Partial<_AlertDialogProperties>

interface AlertDialogEvents<T> extends NativeObjectEvents<T> {

  /**
   * Fired when the dialog was closed for any reason.
   */
  close?: (event: {readonly button: 'ok'|'cancel'|'neutral'|'', readonly target: T, readonly timeStamp: number, readonly type: string}) => void;

  /**
   * Fired when the dialog was closed by pressing the 'cancel' button.
   */
  closeCancel?: (event: {readonly target: T, readonly timeStamp: number, readonly type: string}) => void;

  /**
   * Fired when the dialog was closed by pressing the 'neutral' button.
   */
  closeNeutral?: (event: {readonly target: T, readonly timeStamp: number, readonly type: string}) => void;

  /**
   * Fired when the dialog was closed by pressing the 'ok' button.
   */
  closeOk?: (event: {readonly target: T, readonly timeStamp: number, readonly type: string}) => void;
}

/**
 * An `AlertDialog` represents a native dialog pop-up showing a message and up to three buttons. It is
 * placed on top of any other API, but is not a widget itself.
 */
interface AlertDialog extends _AlertDialogProperties {}
export class AlertDialog extends NativeObject {

  public constructor(properties?: AlertDialogProperties);

  /**
   * Hides the dialog permanently. It can not be made visible anymore.
   */
  close(): this;

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: AlertDialogEvents<this>): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: AlertDialogEvents<this>): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: AlertDialogEvents<this>): this;

  /**
   * Makes the dialog visible.
   */
  open(): this;

  /**
   * Sets the given property.
   * @param property 
   * @param value 
   */
  set(property: string, value: any): this;

  /**
   * Sets all key-value pairs in the properties object as widget properties.
   * @param properties 
   */
  set(properties: AlertDialogProperties): this;
}

// App

interface _AppProperties extends _NativeObjectProperties {

  /**
   * Uniquely identifies the app.
   */
  id: string;

  /**
   * Enables certificate pinning for HTTP requests. When pinned certificates are defined for a host,
   * connections to this host will only be permitted if the server provides a matching certificate.
   * Connections to hosts that are not in the list are not affected.
   * Certificate pinning affects the following components: XHR/fetch, WebSockets, image loading and app
   * patching. It does *not* affect WebViews.
   * The list of pinned certificates has to be in the form of `[{host: <string>, hash: <string>,
   * algorithm: <RSA2048|RSA4096|ECDSA256>}, ..]`.
   * - The `host` attribute denotes the host name (including subdomain) of the host to be pinned
   * ([wildcards allowed](https://en.wikipedia.org/wiki/Wildcard_DNS_record)).
   * - The `hash` attribute is the base64 encoded sha256 fingerprint of the _subjectPublicKeyInfo_,
   * prefixed with `sha256/`.
   * - The `algorithm` attribute denotes the public key algorithm of the SSL certificate and can have the
   * values `RSA2048`, `RSA4096` or `ECDSA256`. This attribute is only required on iOS.
   * Example: `[{host: 'freegeoip.net', hash: 'sha256/eTPz+5X4FcoK5fW+I0Wt/9y2vOkU3UMmVnDs7yGUJf8',
   * algorithm: 'RSA4096'}]`
   * For further details see https://www.owasp.org/index.php/Certificate_and_Public_Key_Pinning.
   */
  pinnedCertificates: any[];

  /**
   * The user facing version number, e.g. '2.1-beta3'.
   */
  version: string;

  /**
   * An alternative version number used in app stores to identify different versions of an app. Usually
   * incremented with each release. This property reflects the `versionCode` on Android and
   * `CFBundleVersion` on iOS.
   */
  versionCode: number;
}
type AppProperties = Partial<_AppProperties>

interface AppEvents<T> extends NativeObjectEvents<T> {

  /**
   * Fired when the back button is pressed on Android.
   */
  backNavigation?: (event: {readonly preventDefault: () => void, readonly target: T, readonly timeStamp: number, readonly type: string}) => void;

  /**
   * Fired when the app becomes invisible. Either because another app is in the foreground or the user has
   * returned to the home screen.
   */
  background?: (event: {readonly target: T, readonly timeStamp: number, readonly type: string}) => void;

  /**
   * The event is fired when the app starts or when it returns from the background.
   */
  foreground?: (event: {readonly target: T, readonly timeStamp: number, readonly type: string}) => void;

  /**
   * Fired when the app is not the interaction target of the user anymore. Usually preceded by `resume`.
   */
  pause?: (event: {readonly target: T, readonly timeStamp: number, readonly type: string}) => void;

  /**
   * Fired when the app is visible and ready to interact with the user. The event is preceded by either
   * `foreground` (the app becomes visible again) or `pause` (the app regains ability to interact with
   * user).
   */
  resume?: (event: {readonly target: T, readonly timeStamp: number, readonly type: string}) => void;

  /**
   * Fired when the app is being destroyed. After this callback no more interaction with the app is
   * possible.
   */
  terminate?: (event: {readonly target: T, readonly timeStamp: number, readonly type: string}) => void;
}

/**
 * The object `tabris.app` provides information about the application.
 */
interface App extends _AppProperties {}
export class App extends NativeObject {

  /**
   * Returns the URL for a given resource that is bundled with the app. Can be used to access app
   * resources like images, videos, etc. Note that these resources can only be accessed in read-only mode.
   * @param path The path of a resource relative to the application root.
   */
  getResourceLocation(path: string): string;

  /**
   * Installs a patch from the given URL. When the patch is successfully installed, it will remain
   * inactive until the application is reloaded. Not supported on Windows.
   * @param url The URL to fetch a patch from.
   * @param callback A callback function to be called when the installation has finished or failed. In case of a failure, the callback will receive a parameter `error` that contains an Error object. If the installation succeeds, this parameter will be `null` and a second parameter will contain the parsed content of the file `patch.json` from the installed patch.
   * @provisional
   */
  installPatch(url: string, callback: (error: Error|null, patch: any|null) => void): void;

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: AppEvents<this>): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: AppEvents<this>): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: AppEvents<this>): this;

  /**
   * Forces the running application to reload the main module and start over.
   */
  reload(): void;

  /**
   * Sets the given property.
   * @param property 
   * @param value 
   */
  set(property: string, value: any): this;

  /**
   * Sets all key-value pairs in the properties object as widget properties.
   * @param properties 
   */
  set(properties: AppProperties): this;
}

declare let app: App;

// CanvasContext

/**
 * The CanvasContext is used for drawing onto the [canvas](./Canvas.md). It is a subset of the HTML5
 * [CanvasRenderingContext2D](https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D).
 */
export class CanvasContext {

  /**
   * Adds an arc to the path which is centered at *(x, y)* position with radius *r* starting at
   * *startAngle* and ending at *endAngle* going in the given direction by *anticlockwise* (defaulting to
   * clockwise).
   * @param x The x coordinate of the arc's center.
   * @param y The y coordinate of the arc's center.
   * @param radius The arc's radius.
   * @param startAngle The angle in radians at which the arc starts, measured clockwise from the positive x axis.
   * @param endAngle The angle in radians at which the arc ends, measured clockwise from the positive x axis.
   * @param anticlockwise if true, causes the arc to be drawn counter-clockwise between the two angles.
   */
  arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, anticlockwise?: boolean): void;

  /**
   * Starts a new path by emptying the list of sub-paths.
   */
  beginPath(): void;

  /**
   * Adds a cubic Bézier curve to the path. The starting point is the last point in the current path.
   * @param cp1x The x axis of the coordinate for the first control point.
   * @param cp1y The y axis of the coordinate for the first control point.
   * @param cp2x The x axis of the coordinate for the second control point.
   * @param cp2y The y axis of the coordinate for the second control point.
   * @param x The x axis of the coordinate for the end point.
   * @param y The y axis of the coordinate for the end point.
   */
  bezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): void;

  /**
   * Sets all pixels in the rectangle defined by starting point *(x, y)* and size *(width, height)* to
   * transparent, erasing any previously drawn content.
   * @param x The x axis of the rectangle's upper-left corner.
   * @param y The y axis of the rectangle's upper-left corner.
   * @param width The rectangle's width.
   * @param height The rectangles height.
   */
  clearRect(x: number, y: number, width: number, height: number): void;

  /**
   * Adds a straight line from the current point to the start of the current sub-path.
   */
  closePath(): void;

  /**
   * creates a new, blank ImageData object with the specified dimensions. All of the pixels in the new
   * object are transparent black.
   * @param width The width of the new ImageData object.
   * @param height The height of the new ImageData object.
   */
  createImageData(width: number, height: number): ImageData;

  /**
   * creates a new, blank ImageData object with the same dimensions as the specified existing ImageData
   * object. All of the pixels in the new object are transparent black.
   * @param imageData An existing ImageData object from which to copy the width and height.
   */
  createImageData(imageData: ImageData): ImageData;

  /**
   * Fills the current or path with the current fill style.
   */
  fill(): void;

  /**
   * draws a filled rectangle at *(x, y)* position whose size is determined by *width* and *height*. and
   * whose color is determined by the fillStyle attribute.
   * @param x The x axis of the rectangle's upper-left corner.
   * @param y The y axis of the rectangle's upper-left corner.
   * @param width The rectangle's width.
   * @param height The rectangles height.
   */
  fillRect(x: number, y: number, width: number, height: number): void;

  /**
   * Fills a given text at the given *(x, y)* position using the current *textAlign* and *textBaseline*
   * values.
   * @param text The text to render.
   * @param x The x axis of the coordinate for the text starting point.
   * @param y The y axis of the coordinate for the text starting point.
   */
  fillText(text: string, x: number, y: number): void;

  /**
   * Returns an ImageData object representing the underlying pixel data for the area of the canvas denoted
   * by the given rectangle.
   * @param x The x axis of the rectangle's upper-left corner.
   * @param y The y axis of the rectangle's upper-left corner.
   * @param width The rectangle's width.
   * @param height The rectangle's height.
   */
  getImageData(x: number, y: number, width: number, height: number): ImageData;

  /**
   * Connects the last point in the sub-path to the *(x, y)* coordinates with a straight line.
   * @param x The x axis of the coordinate for the end of the line.
   * @param y The y axis of the coordinate for the end of the line.
   */
  lineTo(x: number, y: number): void;

  /**
   * Moves the starting point of a new sub-path to the *(x, y)* coordinates.
   * @param x The x axis of the point.
   * @param y The y axis of the point.
   */
  moveTo(x: number, y: number): void;

  /**
   * Paints data from the given ImageData object onto the bitmap at coordinates (x, y).
   * @param imageData An ImageData object containing the array of pixel values.
   * @param x x-coordinate of the upper-left corner of the image data rectangle
   * @param y y-coordinate of the upper-left corner of the image data rectangle
   */
  putImageData(imageData: ImageData, x: number, y: number): void;

  /**
   * Adds a quadratic Bézier curve to the path. The starting point is the last point in the current path.
   * @param cpx The x axis of the coordinate for the control point.
   * @param cpy The y axis of the coordinate for the control point.
   * @param x The x axis of the coordinate for the end point.
   * @param y The y axis of the coordinate for the end point.
   */
  quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): void;

  /**
   * Creates a path for a rectangle with the top-left corner at *(x, y)*
   * @param x The x axis of the rectangle's upper-left corner.
   * @param y The y axis of the rectangle's upper-left corner.
   * @param width The rectangle's width.
   * @param height The rectangles height.
   */
  rect(x: number, y: number, width: number, height: number): void;

  /**
   * Restores the most recently saved canvas state by popping the top entry in the drawing state stack.
   */
  restore(): void;

  /**
   * Adds a rotation to the transformation matrix.
   * @param angle  The angle to rotate clockwise in radians.
   */
  rotate(angle: number): void;

  /**
   * Saves the entire state of the canvas by pushing the current state onto a stack.
   */
  save(): void;

  /**
   * Adds a scaling transformation to the canvas units by x horizontally and by y vertically.
   * @param x Scaling factor in the horizontal direction.
   * @param y Scaling factor in the vertical direction.
   */
  scale(x: number, y: number): void;

  /**
   * resets (overrides) the current transformation to the identity matrix and then invokes a
   * transformation described by the arguments of this method. The matrix has the following format:
   * [[a, c, e],
   * [b, d, f],
   * [0, 0, 1]]
   * @param a Horizontal scaling.
   * @param b Horizontal skewing.
   * @param c Vertical skewing.
   * @param d Vertical scaling.
   * @param e Horizontal moving.
   * @param f Vertical moving.
   */
  setTransform(a: number, b: number, c: number, d: number, e: number, f: number): void;

  /**
   * Strokes the current path with the current stroke style.
   */
  stroke(): void;

  /**
   * draws the outline of a rectangle at *(x, y)* position whose size is determined by *width* and
   * *height* using the current stroke style.
   * @param x The x axis of the rectangle's upper-left corner.
   * @param y The y axis of the rectangle's upper-left corner.
   * @param width The rectangle's width.
   * @param height The rectangles height.
   */
  strokeRect(x: number, y: number, width: number, height: number): void;

  /**
   * Strokes a given text at the given *(x, y)* position using the current *textAlign* and *textBaseline*
   * values.
   * @param text The text to render.
   * @param x The x axis of the coordinate for the text starting point.
   * @param y The y axis of the coordinate for the text starting point.
   */
  strokeText(text: string, x: number, y: number): void;

  /**
   * Multiplies the current transformation with the matrix described by the arguments of this method. The
   * matrix has the following format:
   * [[a, c, e],
   * [b, d, f],
   * [0, 0, 1]]
   * @param a Horizontal scaling.
   * @param b Horizontal skewing.
   * @param c Vertical skewing.
   * @param d Vertical scaling.
   * @param e Horizontal moving.
   * @param f Vertical moving.
   */
  transform(a: number, b: number, c: number, d: number, e: number, f: number): void;

  /**
   * Adds a translation transformation by moving the canvas and its origin *x* horizontally and *y*
   * vertically on the grid.
   * @param x The distance to move in the horizontal direction.
   * @param y The distance to move in the vertical direction.
   */
  translate(x: number, y: number): void;

  /**
   * Specifies the color to use inside shapes.
   */
  fillStyle: Color;

  /**
   * Specifies the current text style being used when drawing text.
   */
  font: Font;

  /**
   * Determines how the end points of every line are drawn.
   */
  lineCap: "butt" | "round" | "square";

  /**
   * Determines how two connecting segments in a shape are joined together.
   */
  lineJoin: "bevel" | "miter" | "round";

  /**
   * The thickness of lines in space units.
   */
  lineWidth: number;

  /**
   * Specifies the color to use for the lines around shapes.
   */
  strokeStyle: Color;

  /**
   * Specifies the current text alignment being used when drawing text.
   */
  textAlign: "center" | "end" | "left" | "right" | "start";

  /**
   * Specifies the current text baseline being used when drawing text.
   */
  textBaseline: "alphabetic" | "bottom" | "hanging" | "ideographic" | "middle" | "top";
}

// Device

interface _DeviceProperties extends _NativeObjectProperties {

  /**
   * The name of the platform. Currently either `"Android"` or `"iOS"`. This property is also available
   * globally as `device.platform`.
   */
  platform: "Android" | "iOS" | "windows";
}
type DeviceProperties = Partial<_DeviceProperties>

interface DeviceEvents<T> extends NativeObjectEvents<T> {

  /**
   * Fired when the `orientation` property has changed and the rotation animation has finished.
   */
  orientationChanged?: (event: {readonly target: T, readonly timeStamp: number, readonly type: string, readonly value: "landscape-primary" | "landscape-secondary" | "portrait-primary" | "portrait-secondary"}) => void;
}

/**
 * The object `tabris.device` provides information about the device that executes the application.
 */
interface Device extends _DeviceProperties {}
export class Device extends NativeObject {

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: DeviceEvents<this>): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: DeviceEvents<this>): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: DeviceEvents<this>): this;

  /**
   * Sets the given property.
   * @param property 
   * @param value 
   */
  set(property: string, value: any): this;

  /**
   * Sets all key-value pairs in the properties object as widget properties.
   * @param properties 
   */
  set(properties: DeviceProperties): this;

  /**
   * The user language configured on the device as an [RFC 4646](http://tools.ietf.org/html/rfc4646)
   * compliant string. For example `"de"`, `"es-ES"`, etc. This property is also available globally as
   * `navigator.language`.
   */
  readonly language: string;

  /**
   * The name of the device model. For example `"iPad4,1"` or `"Nexus 7"`. This property is also available
   * globally as `device.model`.
   */
  readonly model: string;

  /**
   * The device orientation. One of `portrait-primary`, `portrait-secondary`, `landscape-primary`, and
   * `landscape-secondary`.
   */
  readonly orientation: "landscape-primary" | "landscape-secondary" | "portrait-primary" | "portrait-secondary";

  /**
   * The ratio between physical pixels and device independent pixels. This property is also available
   * globally as
   * [`window.devicePixelRatio`](https://developer.mozilla.org/en-US/docs/Web/API/Window.devicePixelRatio).
   */
  readonly scaleFactor: number;

  /**
   * The entire height of the device's screen in device independent pixel. Depends on the current device
   * orientation. This property is also available globally as
   * [screen.height](https://developer.mozilla.org/en-US/docs/Web/API/Screen.height).
   */
  readonly screenHeight: number;

  /**
   * The entire width of the device's screen in device independent pixel. Depends on the current device
   * orientation. This property is also available as globally as
   * [screen.width](https://developer.mozilla.org/en-US/docs/Web/API/Screen.width).
   */
  readonly screenWidth: number;

  /**
   * The platform version. On iOS it looks like this: `"8.1.1"`. On Android, the [version
   * code](https://developer.android.com/reference/android/os/Build.VERSION_CODES.html) is returned. This
   * property is also available globally as `device.version`.
   */
  readonly version: string;

  /**
   * Returns `true` if a hardware keyboard is present. The developer may choose to handle some user input
   * differently in that case. Available only on windows.
   */
  readonly win_keyboardPresent: boolean;

  /**
   * On a PC this returns `"touch"` when in tablet mode, otherwise `"mouse"`. On phones this this returns
   * `"mouse"` when displayed on an external display ("Continuum"), otherwise `"touch"`. Available only on
   * windows
   */
  readonly win_primaryInput: "mouse" | "touch";
}

declare let device: Device;

// InactivityTimer

interface _InactivityTimerProperties extends _NativeObjectProperties {

  /**
   * The interval of user inactivity that will trigger the timer. Given in milliseconds. Changes to this
   * property will not affect a running timer.
   */
  delay: number;
}
type InactivityTimerProperties = Partial<_InactivityTimerProperties>

interface InactivityTimerEvents<T> extends NativeObjectEvents<T> {

  /**
   * Fired when the app has not been interacted with since the configured delay.
   */
  timeout?: (event: {readonly target: T, readonly timeStamp: number, readonly type: string}) => void;
}

/**
 * A timer that triggers when the app has not been interacted with for a configurable interval.
 */
interface InactivityTimer extends _InactivityTimerProperties {}
export class InactivityTimer extends NativeObject {

  public constructor(properties?: InactivityTimerProperties);

  /**
   * Stops and resets the timer.
   */
  cancel(): void;

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: InactivityTimerEvents<this>): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: InactivityTimerEvents<this>): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: InactivityTimerEvents<this>): this;

  /**
   * Sets the given property.
   * @param property 
   * @param value 
   */
  set(property: string, value: any): this;

  /**
   * Sets all key-value pairs in the properties object as widget properties.
   * @param properties 
   */
  set(properties: InactivityTimerProperties): this;

  /**
   * Starts the timer with the currently configured delay. After the first `timeout` event, the timer will
   * stop but it can be started again.
   */
  start(): void;
}

// NativeObject

interface _NativeObjectProperties {
}
type NativeObjectProperties = Partial<_NativeObjectProperties>

interface NativeObjectEvents<T> {

  [k: string]: undefined | ((event: {readonly [p: string]: any, readonly target: T, readonly timeStamp: number, readonly type: string}) => void);
}

/**
 * Base class for all objects with a native implementation.
 */
interface NativeObject extends _NativeObjectProperties {}
export class NativeObject {

  protected constructor(properties?: NativeObjectProperties);

  /**
   * Gets the current value of the given *property*.
   * @param property 
   */
  get(property: string): any;

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: NativeObjectEvents<this>): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: NativeObjectEvents<this>): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: NativeObjectEvents<this>): this;

  /**
   * Sets the given property.
   * @param property 
   * @param value 
   */
  set(property: string, value: any): this;

  /**
   * Sets all key-value pairs in the properties object as widget properties.
   * @param properties 
   */
  set(properties: NativeObjectProperties): this;

  /**
   * Notifies all registered listeners for the given *type* and passes the *event* object to the
   * listeners.
   * @param type The type of event to trigger
   * @param event The event object to pass to listener functions.
   */
  trigger(type: string, event: Object): this;

  /**
   * An application-wide unique identifier automatically assigned to all native objects on creation.
   */
  readonly cid: string;
}

// UI

interface _UIProperties extends _CompositeProperties {

  /**
   * The content view is the container for the widgets that constitute the app's main UI. It covers the
   * entire app area. Widgets can be appended directly to the content view.
   */
  contentView: Composite;

  /**
   * A drawer that can be swiped in from the left edge of the screen. The drawer is locked by default. To
   * use it in an application, set the property `locked` to `false`. The drawer can contain any kind of
   * widgets.
   */
  drawer: Drawer;

  /**
   * Represents the system navigation bar is the onscreen area where *Back*, *Home* and similar buttons
   * are displayed. It is only available on Android.
   */
  navigationBar: NavigationBar;

  /**
   * Represents the system status bar. This is the area where notifications, status icons and device time
   * are displayed.
   */
  statusBar: StatusBar;
}
type UIProperties = Partial<_UIProperties>

interface UIEvents<T> extends CompositeEvents<T> {
}

/**
 * The object `tabris.ui` represents the top-level parent for all widgets. It provides access to the
 * status bar, the navigation bar, the drawer and the content view.
 */
interface UI extends _UIProperties {}
export class UI extends Composite {

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: UIEvents<this>): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: UIEvents<this>): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: UIEvents<this>): this;

  /**
   * Sets the given property.
   * @param property 
   * @param value 
   */
  set(property: string, value: any): this;

  /**
   * Sets all key-value pairs in the properties object as widget properties.
   * @param properties 
   */
  set(properties: UIProperties): this;
}

declare let ui: UI;

// WidgetCollection

/**
 * A `WidgetCollection` is an array-like object representing a set of widgets, as returned by the widget
 * methods `children` and `find`.
 */
export class WidgetCollection {

  /**
   * Animates all widgets in this collection.
   * @param properties The properties and target values to animate.
   * @param options Configures the animation itself.
   */
  animate(properties: {transform?: Transformation, opacity?: number}, options: AnimationOptions): void;

  /**
   * Appends all widgets in this collection to the given parent widget.
   * @param parent The parent widget to append to.
   */
  appendTo(parent: Composite): this;

  /**
   * Returns a collection containing all children of all widgets in this collection that match the given
   * selector.
   * @param selector A selector expression or a predicate function to filter the results.
   */
  children(selector?: Selector): WidgetCollection;

  /**
   * Disposes all widgets in this collection.
   */
  dispose(): void;

  /**
   * Returns a new *WidgetCollection* containing all widgets in this collection that match the given
   * selector.
   * @param selector A selector expression or a predicate function to filter the results.
   */
  filter(selector: Selector): WidgetCollection;

  /**
   * Returns a collection containing all descendants of all widgets in this collection that match the
   * given selector.
   * @param selector A selector expression or a predicate function to filter the results.
   */
  find(selector?: Selector): WidgetCollection;

  /**
   * Returns the first widget in the collection. Same as `collection[0]`.
   */
  first(): Widget;

  /**
   * Calls the given callback function once for each widget in the collection.
   * @param callback The function to call for each widget. The arguments are: *widget*, *index*, *collection*
   */
  forEach(callback: (widget: Widget, index: number, collection: WidgetCollection) => void): void;

  /**
   * Returns the value of the given property of the first widget in this collection.
   * @param property 
   */
  get(property: string): any;

  /**
   * Returns `true` if the given widget is included in the collection, `false` otherwise.
   * @param widget The widget to search in the collection.
   */
  includes(widget: Widget): boolean;

  /**
   * Returns the index of the given widget within the collection, or `-1` if the widget is not present.
   * @param widget The widget to locate in the collection.
   */
  indexOf(widget: Widget): number;

  /**
   * Returns the last widget in the collection. Same as `collection[collection.length - 1]`.
   */
  last(): Widget;

  /**
   * Removes the given listener from all widgets in this collection. See also `Widget.off()`.
   * @param event 
   * @param listener 
   * @param context 
   */
  off(event: string, listener: Function, context?: this): this;

  /**
   * Adds the given listener to all widgets in this collection. See also `Widget.on()`.
   * @param event 
   * @param listener 
   * @param context In the listener function, `this` will point to this object.
   */
  on(event: string, listener: Function, context?: this): this;

  /**
   * Adds the given listener for single execution on all widgets in this collection. See also
   * `Widget.once()`.
   * @param event 
   * @param listener 
   * @param context In the listener function, `this` will point to this object.
   */
  once(event: string, listener: Function, context?: this): this;

  /**
   * Returns a collection containing all direct parents of the widgets in this collection.
   */
  parent(): WidgetCollection;

  /**
   * Sets the given property on all widgets in this collection. See also `Widget.set()`.
   * @param property 
   * @param value 
   */
  set(property: string, value: any): this;

  /**
   * Sets all key-value pairs in the properties object on all widgets in this collection. See also
   * `Widget.set()`.
   * @param properties 
   */
  set(properties: Object): this;

  /**
   * Returns an Array containing all widgets in the collection.
   */
  toArray(): Widget[];

  /**
   * Triggers an event of the given type on all widgets in this collection. See also `Widget.trigger()`
   * @param event 
   * @param ...params 
   */
  trigger(event: string, ...params: any[]): this;

  /**
   * Contains the number of widgets in the collection.
   */
  readonly length: number;
}

// Action

interface _ActionProperties extends _WidgetProperties {

  /**
   * Icon image for the action.
   */
  image: Image;

  /**
   * Actions with higher placement priority will be placed at a more significant position in the UI, e.g.
   * low priority actions could go into a menu instead of being included in a toolbar.
   */
  placementPriority: "high" | "low" | "normal";

  /**
   * The text to be displayed for the action.
   */
  title: string;

  /**
   * Allows to override the image of the Action with an MDL2 ("Metro Design Language 2") symbol. When the
   * string does not exactly match [the name of an MDL2
   * symbol](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.controls.symbol.aspx)
   * the `image` property is used instead. Platforms other than windows ignore this property and always
   * show the image.
   */
  win_symbol: string;
}
type ActionProperties = Partial<_ActionProperties>

interface ActionEvents<T> extends WidgetEvents<T> {

  /**
   * Fired when the action is invoked.
   */
  select?: (event: {readonly target: T, readonly timeStamp: number, readonly type: string}) => void;
}

/**
 * An executable item that is integrated in the application's navigation menu. Add a listener on
 * *select* to implement the action.
 */
interface Action extends _ActionProperties {}
export class Action extends Widget {

  public constructor(properties?: ActionProperties);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: ActionEvents<this>): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: ActionEvents<this>): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: ActionEvents<this>): this;

  /**
   * Sets the given property.
   * @param property 
   * @param value 
   */
  set(property: string, value: any): this;

  /**
   * Sets all key-value pairs in the properties object as widget properties.
   * @param properties 
   */
  set(properties: ActionProperties): this;
}

// ActivityIndicator

interface _ActivityIndicatorProperties extends _WidgetProperties {
}
type ActivityIndicatorProperties = Partial<_ActivityIndicatorProperties>

interface ActivityIndicatorEvents<T> extends WidgetEvents<T> {
}

/**
 * A widget representing a spinning indicator for indeterminate loading / processing time.
 */
interface ActivityIndicator extends _ActivityIndicatorProperties {}
export class ActivityIndicator extends Widget {

  public constructor(properties?: ActivityIndicatorProperties);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: ActivityIndicatorEvents<this>): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: ActivityIndicatorEvents<this>): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: ActivityIndicatorEvents<this>): this;

  /**
   * Sets the given property.
   * @param property 
   * @param value 
   */
  set(property: string, value: any): this;

  /**
   * Sets all key-value pairs in the properties object as widget properties.
   * @param properties 
   */
  set(properties: ActivityIndicatorProperties): this;
}

// Button

interface _ButtonProperties extends _WidgetProperties {

  /**
   * The horizontal alignment of the button text.
   */
  alignment: "center" | "left" | "right";

  /**
   * An image to be displayed on the button.
   */
  image: Image;

  /**
   * The button's label text.
   */
  text: string;
}
type ButtonProperties = Partial<_ButtonProperties>

interface ButtonEvents<T> extends WidgetEvents<T> {

  /**
   * Fired when the button is pressed.
   */
  select?: (event: {readonly target: T, readonly timeStamp: number, readonly type: string}) => void;
}

/**
 * A push button. Can contain a text or an image.
 */
interface Button extends _ButtonProperties {}
export class Button extends Widget {

  public constructor(properties?: ButtonProperties);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: ButtonEvents<this>): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: ButtonEvents<this>): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: ButtonEvents<this>): this;

  /**
   * Sets the given property.
   * @param property 
   * @param value 
   */
  set(property: string, value: any): this;

  /**
   * Sets all key-value pairs in the properties object as widget properties.
   * @param properties 
   */
  set(properties: ButtonProperties): this;
}

// Canvas

interface _CanvasProperties extends _CompositeProperties {
}
type CanvasProperties = Partial<_CanvasProperties>

interface CanvasEvents<T> extends CompositeEvents<T> {
}

/**
 * Canvas is a widget that can be used to draw graphics using a [canvas context](./CanvasContext.md).
 */
interface Canvas extends _CanvasProperties {}
export class Canvas extends Composite {

  public constructor(properties?: CanvasProperties);

  /**
   * Returns the drawing context with the given size.
   * @param contextType The context identifier. Only `"2d"` is currently supported.
   * @param width the width of the canvas context to create
   * @param height the height of the canvas context to create
   */
  getContext(contextType: string, width: number, height: number): CanvasContext;

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: CanvasEvents<this>): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: CanvasEvents<this>): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: CanvasEvents<this>): this;

  /**
   * Sets the given property.
   * @param property 
   * @param value 
   */
  set(property: string, value: any): this;

  /**
   * Sets all key-value pairs in the properties object as widget properties.
   * @param properties 
   */
  set(properties: CanvasProperties): this;
}

// CheckBox

interface _CheckBoxProperties extends _WidgetProperties {

  /**
   * The checked state of the check box.
   */
  checked: boolean;

  /**
   * The label text of the check box.
   */
  text: string;
}
type CheckBoxProperties = Partial<_CheckBoxProperties>

interface CheckBoxEvents<T> extends WidgetEvents<T> {

  /**
   * Fired when the check box is checked or unchecked.
   */
  checkedChanged?: (event: {readonly target: T, readonly timeStamp: number, readonly type: string, readonly value: boolean}) => void;

  /**
   * Fired when the check box is checked or unchecked by the user.
   */
  select?: (event: {readonly checked: boolean, readonly target: T, readonly timeStamp: number, readonly type: string}) => void;
}

/**
 * A check box widget.
 */
interface CheckBox extends _CheckBoxProperties {}
export class CheckBox extends Widget {

  public constructor(properties?: CheckBoxProperties);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: CheckBoxEvents<this>): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: CheckBoxEvents<this>): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: CheckBoxEvents<this>): this;

  /**
   * Sets the given property.
   * @param property 
   * @param value 
   */
  set(property: string, value: any): this;

  /**
   * Sets all key-value pairs in the properties object as widget properties.
   * @param properties 
   */
  set(properties: CheckBoxProperties): this;
}

// CollectionView

interface _CollectionViewProperties extends _WidgetProperties {

  /**
   * The height of a collection cell. If set to `"auto"`, the cell height will be calculated individually
   * for each cell. If set to a function, this function will be called for every item, providing the item
   * index and the cell type as parameters, and must return the cell height for the given item.
   */
  cellHeight: number|"auto"|((index: number, cellType: string) => number);

  /**
   * The name of the cell type to use for the item at the given index. This name will be passed to the
   * `createCell` and `cellHeight` callbacks. Cells will be reused only for those items that map to the
   * same cell type. If set to a function, this function will be called for every item, providing the item
   * index as a parameter, and must return a unique name for the cell type to use for the given item.
   */
  cellType: string|((index: number) => string);

  /**
   * The number of columns to display in the collection view. If set to a value `n > 1`, each row will
   * contain `n` items. The available space will be equally distributed between columns.
   */
  columnCount: number;

  /**
   * A callback used to create a new reusable cell widget for a given type. This callback will be called
   * by the framework and the created cell will be reused for different items. The created widget should
   * be populated in the `updateCell` function.
   * @static
   */
  createCell: (cellType: string) => Widget;

  /**
   * The number of items to display. To add or remove items later, use the methods `insert` and `remove`
   * instead of setting the `itemCount`. To display a new list of items, set this property and call
   * `refresh()`.
   */
  itemCount: number;

  /**
   * Enables the user to trigger a refresh by using the pull-to-refresh gesture.
   */
  refreshEnabled: boolean;

  /**
   * Whether the refresh indicator is currently visible. Will be set to `true` when a *refresh* event is
   * triggered. Reset it to `false` when the refresh is finished.
   */
  refreshIndicator: boolean;

  /**
   * The message text displayed together with the refresh indicator. Currently not supported on Android.
   */
  refreshMessage: string;

  /**
   * A callback used to update a given cell widget to display the item with the given index. This callback
   * will be called by the framework.
   * @static
   */
  updateCell: (cell: Widget, index: number) => void;
}
type CollectionViewProperties = Partial<_CollectionViewProperties>

interface CollectionViewEvents<T> extends WidgetEvents<T> {

  /**
   * Fired when the user requested a refresh. An event listener should reset the *refreshIndicator*
   * property when refresh is finished.
   */
  refresh?: (event: {readonly target: T, readonly timeStamp: number, readonly type: string}) => void;

  /**
   * Fired while the collection view is scrolling.
   */
  scroll?: (event: {readonly deltaX: number, readonly deltaY: number, readonly target: T, readonly timeStamp: number, readonly type: string}) => void;

  /**
   * Fired when a cell is selected.
   */
  select?: (event: {readonly index: number, readonly target: T, readonly timeStamp: number, readonly type: string}) => void;
}

/**
 * A scrollable list that displays data items in cells, one per row. Cells are created on demand by the
 * *createCell* callback and reused on scrolling.
 */
interface CollectionView extends _CollectionViewProperties {}
export class CollectionView extends Widget {

  public constructor(properties?: CollectionViewProperties);

  /**
   * Inserts one or more items at the given index. When no *count* is specified, a single item will be
   * added at the given *index*. New cells may be created if needed. The `updateCell` callback will only
   * be called for those new items that become immediately visible. Note that inserting new items changes
   * the index of all subsequent items. This operation will update the `itemCount` property.
   * @param index 
   * @param count The position to insert the items at. A negative index is interpreted as relative to the end. If the given index is greater than the item count, new items will be appended at the end. 
   */
  insert(index: number, count?: number): void;

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: CollectionViewEvents<this>): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: CollectionViewEvents<this>): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: CollectionViewEvents<this>): this;

  /**
   * Triggers an update of the item at the given *index* by calling the `updateCell` callback of the
   * corresponding. If no *index* is given, all visible items will be updated.
   * @param index The index of the item that was changed.
   */
  refresh(index?: number): void;

  /**
   * Removes one or more items beginning with the given index. When no *count* is given, only the item at
   * *index* will be removed. Note that this changes the index of all subsequent items, however. This
   * operation will update the `itemCount` property.
   * @param index The index of the first item to remove. A negative value is interpreted as relative to the end.
   * @param count The number of items to remove.
   */
  remove(index: number, count?: number): void;

  /**
   * Scrolls the item with the given index into view.
   * @param index The index of the item to reveal. If this is negative, it is interpreted as relative to the end
   */
  reveal(index: number): void;

  /**
   * Sets the given property.
   * @param property 
   * @param value 
   */
  set(property: string, value: any): this;

  /**
   * Sets all key-value pairs in the properties object as widget properties.
   * @param properties 
   */
  set(properties: CollectionViewProperties): this;

  /**
   * The index of the first item that is currently visible on screen.
   */
  readonly firstVisibleIndex: number;

  /**
   * The index of the last item that is currently visible on screen.
   */
  readonly lastVisibleIndex: number;
}

// Composite

interface _CompositeProperties extends _WidgetProperties {
}
type CompositeProperties = Partial<_CompositeProperties>

interface CompositeEvents<T> extends WidgetEvents<T> {

  /**
   * Fired when a child is added to this widget.
   */
  addChild?: (event: {readonly child: Widget, readonly index: number, readonly target: T, readonly timeStamp: number, readonly type: string}) => void;

  /**
   * Fired when a child is removed from this widget.
   */
  removeChild?: (event: {readonly child: Widget, readonly index: number, readonly target: T, readonly timeStamp: number, readonly type: string}) => void;
}

/**
 * An empty widget that can contain other widgets.
 */
interface Composite extends _CompositeProperties {}
export class Composite extends Widget {

  public constructor(properties?: CompositeProperties);

  /**
   * Adds the given widgets to the composite.
   * @param ...widgets 
   */
  append(...widgets: Widget[]): this;

  /**
   * Adds all widgets in the given array to the composite.
   * @param widgets 
   */
  append(widgets: Widget[]): this;

  /**
   * Adds all widgets in the given collection to the composite.
   * @param widgets 
   */
  append(widgets: WidgetCollection): this;

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: CompositeEvents<this>): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: CompositeEvents<this>): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: CompositeEvents<this>): this;

  /**
   * Sets the given property.
   * @param property 
   * @param value 
   */
  set(property: string, value: any): this;

  /**
   * Sets all key-value pairs in the properties object as widget properties.
   * @param properties 
   */
  set(properties: CompositeProperties): this;
}

// Drawer

interface _DrawerProperties extends _CompositeProperties {

  /**
   * Controls whether the drawer can be opened and closed. When set to `false`, the drawer cannot be
   * opened and calls to `drawer.open()` will be ignored.
   */
  enabled: boolean;

  /**
   * Controls how the drawer integrates into its targetView. 
   * - `overlay` completely hides the drawer when closed and overlays other content when opened.
   * - `compactOverlay` makes the drawer partially visible when closed so a 48px wide bar remains
   * side-by-side with the targetViews other content. If a drawer-action controls the drawer it is placed
   * inside this bar. When the drawer is opened its remaining width overlays the targetViews other
   * content.
   * - `inline` completely hides the drawer when closed, but shows it side-by-side with the targetView
   * when opened. The drawer does not close automatically in this mode.
   * - `compactInline` makes the drawer partially visible when closed (like `compactOverlay`), but shows
   * it side-by-side with the targetView when opened (like `inline`).
   * Available only on windows.
   */
  win_displayMode: "compactInline" | "compactOverlay" | "inline" | "overlay";

  /**
   * This property may be set to an instance of NavigationView to make its drawer-action open/close the
   * drawer. It also integrates the drawer into the NavigationView layout. When not set to NavigationView
   * instance the property defaults to `tabris.ui`. Other widgets are not supported. Available only on
   * Windows.
   */
  win_targetView: Widget;
}
type DrawerProperties = Partial<_DrawerProperties>

interface DrawerEvents<T> extends CompositeEvents<T> {

  /**
   * Fired when the drawer is closed and has reached its resting position.
   */
  close?: (event: {readonly target: T, readonly timeStamp: number, readonly type: string}) => void;

  /**
   * Fired when the drawer is opened and has reached its resting position.
   */
  open?: (event: {readonly target: T, readonly timeStamp: number, readonly type: string}) => void;
}

/**
 * A drawer that can be swiped in from the left edge of the screen. There's only a single instance that
 * can be accessed via `tabris.ui.drawer`. The drawer is locked by default. To use it in an application,
 * set the property `locked` to `false`. The drawer can contain any kind of widgets.
 */
interface Drawer extends _DrawerProperties {}
export class Drawer extends Composite {

  /**
   * Closes the drawer.
   */
  close(): this;

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: DrawerEvents<this>): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: DrawerEvents<this>): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: DrawerEvents<this>): this;

  /**
   * Opens the drawer. It may be useful to call this method on first startup, so that users notice the
   * drawer and its contents.
   */
  open(): this;

  /**
   * Sets the given property.
   * @param property 
   * @param value 
   */
  set(property: string, value: any): this;

  /**
   * Sets all key-value pairs in the properties object as widget properties.
   * @param properties 
   */
  set(properties: DrawerProperties): this;
}

// ImageView

interface _ImageViewProperties extends _WidgetProperties {

  /**
   * The image to display. Providing the `width` and `height` attributes on the image will resize it
   * internally. When no dimensions are given the image will be loaded with its original size. Since the
   * full size image might occupy a lot of memory, it's recommended to provide exact dimensions.
   */
  image: Image;

  /**
   * How to scale the image.
   * - `fit` will scale the image proportionally to fit into the view, possible leaving some empty space
   * at the edges. That is, the image will be displayed as large as possible while being fully contained
   * in the view.
   * - `fill` will scale the image proportionally to fill the entire view, possibly cutting off parts of
   * the image. That is, the image will be displayed as small as possible while covering the entire view.
   * - `auto` will scale *down* the image to *fit* into the view if it is too large, but it won't scale up
   * a smaller image.
   * - `stretch` will resize the image to the actual bounds of the image view.
   * - `none` will not resize the image at all. The image will be displayed in its original size.
   */
  scaleMode: "auto" | "fill" | "fit" | "none" | "stretch";

  /**
   * A color to change the image appearance. All opaque parts of the image will be tinted with the given
   * color. Set to `initial` to remove the effect. Available on iOS and Android 5.0+.
   */
  tintColor: Color;
}
type ImageViewProperties = Partial<_ImageViewProperties>

interface ImageViewEvents<T> extends WidgetEvents<T> {

  /**
   * Fired when the image loading has finished.
   */
  load?: (event: {readonly error: boolean, readonly target: T, readonly timeStamp: number, readonly type: string}) => void;
}

/**
 * A widget to display an image.
 */
interface ImageView extends _ImageViewProperties {}
export class ImageView extends Widget {

  public constructor(properties?: ImageViewProperties);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: ImageViewEvents<this>): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: ImageViewEvents<this>): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: ImageViewEvents<this>): this;

  /**
   * Sets the given property.
   * @param property 
   * @param value 
   */
  set(property: string, value: any): this;

  /**
   * Sets all key-value pairs in the properties object as widget properties.
   * @param properties 
   */
  set(properties: ImageViewProperties): this;
}

// NavigationBar

interface _NavigationBarProperties extends _WidgetProperties {

  /**
   * Background color of the navigation bar.
   */
  background: Color;

  /**
   * Controls how the navigation bar is positioned relative to the `tabris.ui.contentView`. The value
   * `default` places the content above the navigation bar. The `hide` option lets the navigation bar
   * disappear, making room for the content. The `float` option lets the content flow underneath the
   * navigation bar.
   */
  displayMode: "default" | "float" | "hide";
}
type NavigationBarProperties = Partial<_NavigationBarProperties>

interface NavigationBarEvents<T> extends WidgetEvents<T> {
}

/**
 * The navigation bar is the onscreen area where *Back*, *Home* and similar buttons are displayed. The
 * singleton instance can be accessed via `tabris.ui.navigationBar` and is only available on Android.
 */
interface NavigationBar extends _NavigationBarProperties {}
export class NavigationBar extends Widget {

  public constructor(properties?: NavigationBarProperties);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: NavigationBarEvents<this>): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: NavigationBarEvents<this>): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: NavigationBarEvents<this>): this;

  /**
   * Sets the given property.
   * @param property 
   * @param value 
   */
  set(property: string, value: any): this;

  /**
   * Sets all key-value pairs in the properties object as widget properties.
   * @param properties 
   */
  set(properties: NavigationBarProperties): this;

  /**
   * The height of the navigation bar in device independent pixel. Can be used in conjunction with the
   * `displayMode` `float` to offset the content as to not have it covered by the navigation bar.
   */
  readonly height: number;
}

// NavigationView

interface _NavigationViewProperties extends _CompositeProperties {

  /**
   * The color used for action icons.
   */
  actionColor: Color;

  /**
   * The color used for action texts. Only applied on Android. IOS uses the `actionColor` to colorize the
   * action text.
   */
  actionTextColor: Color;

  /**
   * The height of the bottom toolbar. Is 0 if not visible or unsupported by the platform.
   */
  bottomToolbarHeight: number;

  /**
   * Whether to display the so-called "Burger menu" to open the drawer.
   */
  drawerActionVisible: boolean;

  /**
   * Controls what animation to use when animating a page transition.
   */
  pageAnimation: "default" | "none";

  /**
   * The text color used for page titles.
   */
  titleTextColor: Color;

  /**
   * The background color of the toolbar.
   */
  toolbarColor: Color;

  /**
   * Whether the toolbar is visible.
   */
  toolbarVisible: boolean;

  /**
   * The height of the top toolbar. Is 0 if not visible.
   */
  topToolbarHeight: number;

  /**
   * The background color used for the drawer action. It is common to the make this the same color as the
   * splash screen. Available only on Windows.
   */
  win_drawerActionBackground: Color;

  /**
   * Controls the color scheme used for the drawer action. When set to `"default"` the theme is inherited
   * from the NavigationView. Available only on Windows.
   */
  win_drawerActionTheme: "dark" | "default" | "light";

  /**
   * Controls the color scheme used for the toolbar's overflow menu. When set to `"default"` the theme is
   * inherited from the toolbar. Available only on Windows.
   */
  win_toolbarOverflowTheme: "dark" | "default" | "light";

  /**
   * Controls the color scheme used for the toolbar. When set to `"default"` the theme is inherited from
   * the NavigationView. Available only on Windows.
   */
  win_toolbarTheme: "dark" | "default" | "light";
}
type NavigationViewProperties = Partial<_NavigationViewProperties>

interface NavigationViewEvents<T> extends CompositeEvents<T> {

  /**
   * Fired when the height of the bottom toolbar changes, e.g. if it changes visibility.
   */
  bottomToolbarHeightChanged?: (event: {readonly target: T, readonly timeStamp: number, readonly type: string, readonly value: number}) => void;

  /**
   * Fired when the height of the top toolbar changes, e.g. if it changes visibility.
   */
  topToolbarHeightChanged?: (event: {readonly target: T, readonly timeStamp: number, readonly type: string, readonly value: number}) => void;
}

/**
 * A widget that displays a stack of [pages](Page) with a toolbar that allows to navigate back. The
 * toolbar also displays the current page's title and the highest priority [actions](Action) that are
 * added to the NavigationView. Only children of type `Page`, `Action` and `SearchAction` are supported.
 * Since the NavigationView does not compute its own size, the width and height must be defined by the
 * respective layout properties (e.g. either `width` or `left` and `right` must be specified).
 */
interface NavigationView extends _NavigationViewProperties {}
export class NavigationView extends Composite {

  public constructor(properties?: NavigationViewProperties);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: NavigationViewEvents<this>): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: NavigationViewEvents<this>): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: NavigationViewEvents<this>): this;

  /**
   * Returns the ordered list of pages on the page stack, with the bottommost page as the first and the
   * topmost page as the last element. This method is similar to children(), but it does not contain
   * children of other types than `Page`.
   */
  pages(): WidgetCollection;

  /**
   * Sets the given property.
   * @param property 
   * @param value 
   */
  set(property: string, value: any): this;

  /**
   * Sets all key-value pairs in the properties object as widget properties.
   * @param properties 
   */
  set(properties: NavigationViewProperties): this;
}

// Page

interface _PageProperties extends _CompositeProperties {

  /**
   * Defines whether this page will be automatically disposed when popped from the NavigationView, e.g.
   * using native back navigation.
   */
  autoDispose: boolean;

  /**
   * An image to be displayed in the navigation bar. Not supported on Windows.
   */
  image: Image;

  /**
   * The page title to be displayed in the navigation bar.
   */
  title: string;
}
type PageProperties = Partial<_PageProperties>

interface PageEvents<T> extends CompositeEvents<T> {

  /**
   * Fired when the page is about to become visible, i.e. it has become the active page.
   */
  appear?: (event: {readonly target: T, readonly timeStamp: number, readonly type: string}) => void;

  /**
   * Fired when the page is no longer visible, i.e. another page has become the active page.
   */
  disappear?: (event: {readonly target: T, readonly timeStamp: number, readonly type: string}) => void;
}

/**
 * A container representing a single page of a NavigationView widget.
 */
interface Page extends _PageProperties {}
export class Page extends Composite {

  public constructor(properties?: PageProperties);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: PageEvents<this>): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: PageEvents<this>): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: PageEvents<this>): this;

  /**
   * Sets the given property.
   * @param property 
   * @param value 
   */
  set(property: string, value: any): this;

  /**
   * Sets all key-value pairs in the properties object as widget properties.
   * @param properties 
   */
  set(properties: PageProperties): this;
}

// Picker

interface _PickerProperties extends _WidgetProperties {

  /**
   * The color of the border of the Picker. On iOS this is a rectangular border around the Picker, on
   * Android it is a single line below the Picker.
   */
  borderColor: Color;

  /**
   * The color of the background of the Picker - applies only to iOS.
   */
  fillColor: Color;

  /**
   * The number of items to display.
   */
  itemCount: number;

  /**
   * A function that returns the string to display for a given index.
   */
  itemText: (index: number) => string;

  /**
   * The index of the currently selected item.
   */
  selectionIndex: number;
}
type PickerProperties = Partial<_PickerProperties>

interface PickerEvents<T> extends WidgetEvents<T> {

  /**
   * Fired when an item was selected by the user.
   */
  select?: (event: {readonly index: number, readonly target: T, readonly timeStamp: number, readonly type: string}) => void;

  /**
   * Fired when the selectionIndex property changes.
   */
  selectionIndexChanged?: (event: {readonly target: T, readonly timeStamp: number, readonly type: string, readonly value: number}) => void;
}

/**
 * A widget with a drop-down list of items to choose from.
 */
interface Picker extends _PickerProperties {}
export class Picker extends Widget {

  public constructor(properties?: PickerProperties);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: PickerEvents<this>): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: PickerEvents<this>): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: PickerEvents<this>): this;

  /**
   * Sets the given property.
   * @param property 
   * @param value 
   */
  set(property: string, value: any): this;

  /**
   * Sets all key-value pairs in the properties object as widget properties.
   * @param properties 
   */
  set(properties: PickerProperties): this;
}

// ProgressBar

interface _ProgressBarProperties extends _WidgetProperties {

  /**
   * The value that represents a progress of 100%.
   */
  maximum: number;

  /**
   * The value that represents a progress of 0%.
   */
  minimum: number;

  /**
   * The actual progress to be displayed.
   */
  selection: number;

  /**
   * This property affects the color of the progress indicator. Not supported on iOS.
   */
  state: "error" | "normal" | "paused";
}
type ProgressBarProperties = Partial<_ProgressBarProperties>

interface ProgressBarEvents<T> extends WidgetEvents<T> {
}

/**
 * A widget representing a numeric value as a horizontal bar with a growing indicator.
 */
interface ProgressBar extends _ProgressBarProperties {}
export class ProgressBar extends Widget {

  public constructor(properties?: ProgressBarProperties);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: ProgressBarEvents<this>): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: ProgressBarEvents<this>): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: ProgressBarEvents<this>): this;

  /**
   * Sets the given property.
   * @param property 
   * @param value 
   */
  set(property: string, value: any): this;

  /**
   * Sets all key-value pairs in the properties object as widget properties.
   * @param properties 
   */
  set(properties: ProgressBarProperties): this;
}

// RadioButton

interface _RadioButtonProperties extends _WidgetProperties {

  /**
   * The checked state of the radio button.
   */
  checked: boolean;

  /**
   * The label text of the radio button.
   */
  text: string;
}
type RadioButtonProperties = Partial<_RadioButtonProperties>

interface RadioButtonEvents<T> extends WidgetEvents<T> {

  /**
   * Fired when the checked property changes.
   */
  checkedChanged?: (event: {readonly target: T, readonly timeStamp: number, readonly type: string, readonly value: boolean}) => void;

  /**
   * Fired when the radio button is selected or deselected by the user.
   */
  select?: (event: {readonly checked: boolean, readonly target: T, readonly timeStamp: number, readonly type: string}) => void;
}

/**
 * A radio button. Selecting a radio button de-selects all its siblings (i.e. all radio buttons within
 * the same parent).
 */
interface RadioButton extends _RadioButtonProperties {}
export class RadioButton extends Widget {

  public constructor(properties?: RadioButtonProperties);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: RadioButtonEvents<this>): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: RadioButtonEvents<this>): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: RadioButtonEvents<this>): this;

  /**
   * Sets the given property.
   * @param property 
   * @param value 
   */
  set(property: string, value: any): this;

  /**
   * Sets all key-value pairs in the properties object as widget properties.
   * @param properties 
   */
  set(properties: RadioButtonProperties): this;
}

// ScrollView

interface _ScrollViewProperties extends _CompositeProperties {

  /**
   * Specifies the scrolling direction of the scroll composite.
   * @static
   */
  direction: "horizontal" | "vertical";
}
type ScrollViewProperties = Partial<_ScrollViewProperties>

interface ScrollViewEvents<T> extends CompositeEvents<T> {

  /**
   * Fired while scrolling horizontally.
   */
  scrollX?: (event: {readonly offset: number, readonly target: T, readonly timeStamp: number, readonly type: string}) => void;

  /**
   * Fired while scrolling vertically.
   */
  scrollY?: (event: {readonly offset: number, readonly target: T, readonly timeStamp: number, readonly type: string}) => void;
}

/**
 * A composite that allows its content to overflow either vertically (default) or horizontally. Since
 * the ScrollView does not compute its own size, the width and height must be defined by the respective
 * layout properties (e.g. either `width` or `left` and `right` must be specified).
 */
interface ScrollView extends _ScrollViewProperties {}
export class ScrollView extends Composite {

  public constructor(properties?: ScrollViewProperties);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: ScrollViewEvents<this>): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: ScrollViewEvents<this>): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: ScrollViewEvents<this>): this;

  /**
   * Scrolls to the given horizontal offset. Give `{animate: false}` as the second parameter to suppress
   * the animation.
   * @param offset The offset to scroll to in dip.
   * @param options An additional object to control the animation. Set to `{animate: false}` to scroll without an animation.
   */
  scrollToX(offset: number, options?: {animate?: boolean}): this;

  /**
   * Scrolls to the given vertical offset. Give `{animate: false}` as the second parameter to suppress the
   * animation.
   * @param offset The offset to scroll to in dip.
   * @param options An additional object to control the animation. Set to `{animate: false}` to scroll without an animation.
   */
  scrollToY(offset: number, options?: {animate?: boolean}): this;

  /**
   * Sets the given property.
   * @param property 
   * @param value 
   */
  set(property: string, value: any): this;

  /**
   * Sets all key-value pairs in the properties object as widget properties.
   * @param properties 
   */
  set(properties: ScrollViewProperties): this;

  /**
   * The horizontal scrolling position in dip.
   */
  readonly offsetX: number;

  /**
   * The vertical scrolling position in dip.
   */
  readonly offsetY: number;
}

// SearchAction

interface _SearchActionProperties extends _ActionProperties {

  /**
   * A hint text that is displayed when the search input is empty.
   */
  message: string;

  /**
   * The list of proposals to display.
   */
  proposals: string[];

  /**
   * The text in the search input field.
   */
  text: string;
}
type SearchActionProperties = Partial<_SearchActionProperties>

interface SearchActionEvents<T> extends ActionEvents<T> {

  /**
   * Fired when a text input has been submitted by pressing the keyboard's search key.
   */
  accept?: (event: {readonly target: T, readonly text: string, readonly timeStamp: number, readonly type: string}) => void;

  /**
   * Fired when the user inputs text.
   */
  input?: (event: {readonly target: T, readonly text: string, readonly timeStamp: number, readonly type: string}) => void;
}

/**
 * An action that displays a search text field with dynamic proposals when selected. Add a listener on
 * *select* to implement the action. On *input*, you may set a list of *proposals*.
 */
interface SearchAction extends _SearchActionProperties {}
export class SearchAction extends Action {

  public constructor(properties?: SearchActionProperties);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: SearchActionEvents<this>): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: SearchActionEvents<this>): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: SearchActionEvents<this>): this;

  /**
   * Invokes the search action, i.e. displays the UI to perform a search.
   */
  open(): void;

  /**
   * Sets the given property.
   * @param property 
   * @param value 
   */
  set(property: string, value: any): this;

  /**
   * Sets all key-value pairs in the properties object as widget properties.
   * @param properties 
   */
  set(properties: SearchActionProperties): this;
}

// Slider

interface _SliderProperties extends _WidgetProperties {

  /**
   * The maximum value.
   */
  maximum: number;

  /**
   * The minimum value.
   */
  minimum: number;

  /**
   * The actual value.
   */
  selection: number;
}
type SliderProperties = Partial<_SliderProperties>

interface SliderEvents<T> extends WidgetEvents<T> {

  /**
   * Fired when the selection property is changed by the user.
   */
  select?: (event: {readonly selection: number, readonly target: T, readonly timeStamp: number, readonly type: string}) => void;

  /**
   * Fired when the selection property changes.
   */
  selectionChanged?: (event: {readonly target: T, readonly timeStamp: number, readonly type: string, readonly value: number}) => void;
}

/**
 * A widget representing a numeric value as an movable indicator on a horizontal line.
 */
interface Slider extends _SliderProperties {}
export class Slider extends Widget {

  public constructor(properties?: SliderProperties);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: SliderEvents<this>): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: SliderEvents<this>): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: SliderEvents<this>): this;

  /**
   * Sets the given property.
   * @param property 
   * @param value 
   */
  set(property: string, value: any): this;

  /**
   * Sets all key-value pairs in the properties object as widget properties.
   * @param properties 
   */
  set(properties: SliderProperties): this;
}

// StatusBar

interface _StatusBarProperties extends _WidgetProperties {

  /**
   * Background color of the status bar. Should be used in conjunction with the `theme` property to keep
   * the status bar icons legible.
   */
  background: Color;

  /**
   * Controls how the status bar is positioned relative to the `tabris.ui.contentView`. The value
   * `default` places the content below the status bar. The `hide` option lets the status bar disappear,
   * making more room for the content. The `float` option lets the content flow underneath the status bar.
   */
  displayMode: "default" | "float" | "hide";

  /**
   * Defines the shade used on the status bar. A `dark` theme sets the foreground icons to be of a light
   * color, whereas `light` sets the icons to a dark color. The theme should be set in conjunction with
   * the `background` property for contrast. The value `default` selects the default theme that depends on
   * the device and on the app. Available on iOS and Android 6+.
   */
  theme: "dark" | "default" | "light";
}
type StatusBarProperties = Partial<_StatusBarProperties>

interface StatusBarEvents<T> extends WidgetEvents<T> {
}

/**
 * The status bar is the area where notifications, status icons and device time are displayed. The
 * singleton instance can be accessed via `tabris.ui.statusBar`.
 */
interface StatusBar extends _StatusBarProperties {}
export class StatusBar extends Widget {

  public constructor(properties?: StatusBarProperties);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: StatusBarEvents<this>): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: StatusBarEvents<this>): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: StatusBarEvents<this>): this;

  /**
   * Sets the given property.
   * @param property 
   * @param value 
   */
  set(property: string, value: any): this;

  /**
   * Sets all key-value pairs in the properties object as widget properties.
   * @param properties 
   */
  set(properties: StatusBarProperties): this;

  /**
   * The height of the status bar in device independent pixel. Can be used in conjunction with the
   * `displayMode` `'float'` to offset the content as to not have it covered by the status bar.
   */
  readonly height: number;
}

// Switch

interface _SwitchProperties extends _WidgetProperties {

  /**
   * The checked state of the switch.
   */
  checked: boolean;

  /**
   * The color of the movable thumb, when switched *off*.
   */
  thumbOffColor: Color;

  /**
   * The color of the movable thumb, when switched *on*.
   */
  thumbOnColor: Color;

  /**
   * The color of the track that holds the thumb, when switched *off*.
   */
  trackOffColor: Color;

  /**
   * The color of the track that holds the thumb, when switched *on*.
   */
  trackOnColor: Color;
}
type SwitchProperties = Partial<_SwitchProperties>

interface SwitchEvents<T> extends WidgetEvents<T> {

  /**
   * Fired when the checked property changes.
   */
  checkedChanged?: (event: {readonly target: T, readonly timeStamp: number, readonly type: string, readonly value: boolean}) => void;

  /**
   * Fired when the switch is toggled by the user.
   */
  select?: (event: {readonly checked: boolean, readonly target: T, readonly timeStamp: number, readonly type: string}) => void;
}

/**
 * A switch widget that can be toggled.
 */
interface Switch extends _SwitchProperties {}
export class Switch extends Widget {

  public constructor(properties?: SwitchProperties);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: SwitchEvents<this>): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: SwitchEvents<this>): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: SwitchEvents<this>): this;

  /**
   * Sets the given property.
   * @param property 
   * @param value 
   */
  set(property: string, value: any): this;

  /**
   * Sets all key-value pairs in the properties object as widget properties.
   * @param properties 
   */
  set(properties: SwitchProperties): this;
}

// Tab

interface _TabProperties extends _CompositeProperties {

  /**
   * A badge to attach to the tab. Only supported on iOS.
   */
  badge: string;

  /**
   * An image to be displayed on the tab.  Will not be shown on iOS if the `TabFolder`'s `tabBarLocation`
   * is set to `top`
   */
  image: Image;

  /**
   * An image to be displayed on the currently active tab.
   */
  selectedImage: Image;

  /**
   * The title to be displayed on the tab.
   */
  title: string;
}
type TabProperties = Partial<_TabProperties>

interface TabEvents<T> extends CompositeEvents<T> {
}

/**
 * A container representing a single tab of a TabFolder widget.
 */
interface Tab extends _TabProperties {}
export class Tab extends Composite {

  public constructor(properties?: TabProperties);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: TabEvents<this>): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: TabEvents<this>): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: TabEvents<this>): this;

  /**
   * Sets the given property.
   * @param property 
   * @param value 
   */
  set(property: string, value: any): this;

  /**
   * Sets all key-value pairs in the properties object as widget properties.
   * @param properties 
   */
  set(properties: TabProperties): this;
}

// TabFolder

interface _TabFolderProperties extends _CompositeProperties {

  /**
   * Enables swiping through tabs.
   */
  paging: boolean;

  /**
   * The currently selected tab.
   */
  selection: Tab;

  /**
   * The placement of the tab titles. When set to `"hidden"`, the tab bar will not be visible. When set to
   * `"auto"`, the position is platform dependent.
   * @static
   */
  tabBarLocation: "auto" | "bottom" | "hidden" | "top";

  /**
   * Controls how the tabs make use of the available horizontal space. Setting the `tabMode` to `"fixed"`
   * makes the tabs span the entire available space. In case of a very wide `TabFolder` the `"fixed"` mode
   * centers the tabs. The mode `"scrollable"` left aligns the tabs and allows to scroll the tabs if there
   * are more tabs than would fit in the available space. Available on Android only.
   * @static
   */
  tabMode: "fixed" | "scrollable";
}
type TabFolderProperties = Partial<_TabFolderProperties>

interface TabFolderEvents<T> extends CompositeEvents<T> {

  /**
   * Fired when `paging` is enabled and a tab is scrolled. The `event` parameter contains position
   * information relative to the currently selected `Tab`. Eg.: scrolling a 500px wide tab 10% to the left
   * sets `offset` to `50`. Scrolling 10% to the right sets `offset` to `-50`.
   */
  scroll?: (event: {readonly offset: number, readonly selection: Tab, readonly target: T, readonly timeStamp: number, readonly type: string}) => void;

  /**
   * Fired when the selection property changes by user interaction.
   */
  select?: (event: {readonly selection: Tab, readonly target: T, readonly timeStamp: number, readonly type: string}) => void;

  /**
   * Fired when the selection property changes.
   */
  selectionChanged?: (event: {readonly target: T, readonly timeStamp: number, readonly type: string, readonly value: Tab}) => void;
}

/**
 * A widget that can switch between [tabs](Tab). Only children of type `Tab` are supported. Since the
 * TabFolder does not compute its own size, the width and height must be defined by the respective
 * layout properties (e.g. either `width` or `left` and `right` must be specified).
 */
interface TabFolder extends _TabFolderProperties {}
export class TabFolder extends Composite {

  public constructor(properties?: TabFolderProperties);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: TabFolderEvents<this>): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: TabFolderEvents<this>): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: TabFolderEvents<this>): this;

  /**
   * Sets the given property.
   * @param property 
   * @param value 
   */
  set(property: string, value: any): this;

  /**
   * Sets all key-value pairs in the properties object as widget properties.
   * @param properties 
   */
  set(properties: TabFolderProperties): this;
}

// TextInput

interface _TextInputProperties extends _WidgetProperties {

  /**
   * The horizontal alignment of the text.
   */
  alignment: "center" | "left" | "right";

  /**
   * Automatically switch to capital letters after every key pressed.
   */
  autoCapitalize: boolean;

  /**
   * Enables the spell checker and auto-correction feature.
   */
  autoCorrect: boolean;

  /**
   * The color of the border of the TextInput. On iOS this is a rectangular border around the TextInput,
   * on Android it is a single line below the TextInput.
   */
  borderColor: Color;

  /**
   * Whether the text can be edited or not.
   */
  editable: boolean;

  /**
   * Label or icon to display on the keyboard 'confirmation' key. The key press can be captured via the
   * `accept` event. Setting an `enterKeyType` other than `default` will change the key behavior to not
   * close the keyboard automatically. The developer is able close the keyboard by removing the focus from
   * the `TextInput`.
   */
  enterKeyType: "default" | "done" | "go" | "next" | "search" | "send";

  /**
   * The color of the background of the TextInput - applies only to iOS.
   */
  fillColor: Color;

  /**
   * Reflects whether this widget has the keyboard focus. Setting this property to `true` will focus the
   * widget and open the virtual keyboard, setting it to `false` will remove the focus and hide the
   * virtual keyboard.
   */
  focused: boolean;

  /**
   * When `true` the `TextInput` will keep its focus, even when tapped outside of the widget bounds.
   */
  keepFocus: boolean;

  /**
   * Selects the keyboard type to use for editing this widget. Has no effect when `type` is set to
   * `multiline`.
   */
  keyboard: "ascii" | "decimal" | "default" | "email" | "number" | "numbersAndPunctuation" | "phone" | "url";

  /**
   * A hint text that is displayed when the input field is empty. Does not apply on iOS when `type` is set
   * to `multiline`.
   */
  message: string;

  /**
   * The text in the input field.
   */
  text: string;

  /**
   * The type of the text widget.
   * @static
   */
  type: "default" | "multiline" | "password" | "search";
}
type TextInputProperties = Partial<_TextInputProperties>

interface TextInputEvents<T> extends WidgetEvents<T> {

  /**
   * Fired when a text input has been finished by pressing the keyboard's Enter key. The label of this key
   * may vary depending on the platform and locale.
   */
  accept?: (event: {readonly target: T, readonly text: string, readonly timeStamp: number, readonly type: string}) => void;

  /**
   * Fired when the widget lost focus.
   */
  blur?: (event: {readonly target: T, readonly timeStamp: number, readonly type: string}) => void;

  /**
   * Fired when the widget gains focus.
   */
  focus?: (event: {readonly target: T, readonly timeStamp: number, readonly type: string}) => void;

  /**
   * Fired when the text was changed by the user.
   */
  input?: (event: {readonly target: T, readonly text: string, readonly timeStamp: number, readonly type: string}) => void;

  /**
   * Fired when the text property changes.
   */
  textChanged?: (event: {readonly target: T, readonly timeStamp: number, readonly type: string, readonly value: string}) => void;
}

/**
 * A widget that allows to enter text.
 */
interface TextInput extends _TextInputProperties {}
export class TextInput extends Widget {

  public constructor(properties?: TextInputProperties);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: TextInputEvents<this>): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: TextInputEvents<this>): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: TextInputEvents<this>): this;

  /**
   * Sets the given property.
   * @param property 
   * @param value 
   */
  set(property: string, value: any): this;

  /**
   * Sets all key-value pairs in the properties object as widget properties.
   * @param properties 
   */
  set(properties: TextInputProperties): this;
}

// TextView

interface _TextViewProperties extends _WidgetProperties {

  /**
   * The horizontal alignment of the text.
   */
  alignment: "center" | "left" | "right";

  /**
   * The amount of space between each line of text. The `lineSpacing` property is a factor with a default
   * value of `1.0`.
   */
  lineSpacing: number;

  /**
   * Allows for a subset of HTML tags in the text. Supported tags are: `a`, `del`, `ins`, `b`, `i`,
   * `strong`, `em`, `big`, `small`, `br`. All tags must be closed (e.g. use `<br/>` instead of `<br>`).
   * Nesting tags is currently not supported.
   * @static
   */
  markupEnabled: boolean;

  /**
   * Limit the number of lines to be displayed to the given maximum. `null` disables this limit.
   */
  maxLines: number|null;

  /**
   * Whether the text can be selected or not. Currently only support on Android.
   */
  selectable: boolean;

  /**
   * The text to display.
   */
  text: string;
}
type TextViewProperties = Partial<_TextViewProperties>

interface TextViewEvents<T> extends WidgetEvents<T> {
}

/**
 * A widget to display a text. For images, use ImageView.
 */
interface TextView extends _TextViewProperties {}
export class TextView extends Widget {

  public constructor(properties?: TextViewProperties);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: TextViewEvents<this>): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: TextViewEvents<this>): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: TextViewEvents<this>): this;

  /**
   * Sets the given property.
   * @param property 
   * @param value 
   */
  set(property: string, value: any): this;

  /**
   * Sets all key-value pairs in the properties object as widget properties.
   * @param properties 
   */
  set(properties: TextViewProperties): this;
}

// ToggleButton

interface _ToggleButtonProperties extends _WidgetProperties {

  /**
   * The horizontal alignment of the button text.
   */
  alignment: "center" | "left" | "right";

  /**
   * The checked state of the toggle button.
   */
  checked: boolean;

  /**
   * An image to be displayed on the button.
   */
  image: Image;

  /**
   * The button's label text.
   */
  text: string;
}
type ToggleButtonProperties = Partial<_ToggleButtonProperties>

interface ToggleButtonEvents<T> extends WidgetEvents<T> {

  /**
   * Fired when the checked property changes.
   */
  checkedChanged?: (event: {readonly target: T, readonly timeStamp: number, readonly type: string, readonly value: boolean}) => void;

  /**
   * Fired when the toggle button is selected or deselected by the user.
   */
  select?: (event: {readonly checked: boolean, readonly target: T, readonly timeStamp: number, readonly type: string}) => void;
}

/**
 * A push button that "snaps in", i.e. it is selected when pressed and deselected when pressed again.
 */
interface ToggleButton extends _ToggleButtonProperties {}
export class ToggleButton extends Widget {

  public constructor(properties?: ToggleButtonProperties);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: ToggleButtonEvents<this>): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: ToggleButtonEvents<this>): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: ToggleButtonEvents<this>): this;

  /**
   * Sets the given property.
   * @param property 
   * @param value 
   */
  set(property: string, value: any): this;

  /**
   * Sets all key-value pairs in the properties object as widget properties.
   * @param properties 
   */
  set(properties: ToggleButtonProperties): this;
}

// Video

interface _VideoProperties extends _WidgetProperties {

  /**
   * If set to `true`, starts playing the video as soon as the state changes from `open` to `ready`.
   */
  autoPlay: boolean;

  /**
   * If set to `true`, overlays the video with a native UI for controlling playback.
   */
  controlsVisible: boolean;

  /**
   * The URL of the video to play. Setting this property to any non-empty string changes the
   * *[state](#state)* to `open` and the video starts loading. Setting this property to an empty string
   * unloads the current video and the *[state](#state)* returns to `empty`.
   */
  url: string;
}
type VideoProperties = Partial<_VideoProperties>

interface VideoEvents<T> extends WidgetEvents<T> {

  /**
   * Fired when the state property changes.
   */
  stateChanged?: (event: {readonly target: T, readonly timeStamp: number, readonly type: string, readonly value: "empty" | "fail" | "finish" | "open" | "pause" | "play" | "ready" | "stale"}) => void;
}

/**
 * A widget that plays a video from an URL.
 */
interface Video extends _VideoProperties {}
export class Video extends Widget {

  public constructor(properties?: VideoProperties);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: VideoEvents<this>): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: VideoEvents<this>): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: VideoEvents<this>): this;

  /**
   * Pauses the video. *[state](#state)* changes to `pause` and `speed` to `0`. Has no effect when
   * *[state](#state)* is not `play`.
   */
  pause(): void;

  /**
   * Starts playing the video, *[state](#state)* changes to `play`. Has no effect unless the current state
   * is either `pause` or `ready`.
   * @param speed Desired playback speed. If the given speed is not supported by the platform or video, the actual playback speed will be `1` - i.e. the natural speed of the video.
   */
  play(speed?: number): void;

  /**
   * Attempts to change the `position` to the given time index. Success depends on the currently loaded
   * video. Has no effect if the current *[state](#state)* is `empty` or `fail`.
   * @param position Desired position in milliseconds.
   */
  seek(position: number): void;

  /**
   * Sets the given property.
   * @param property 
   * @param value 
   */
  set(property: string, value: any): this;

  /**
   * Sets all key-value pairs in the properties object as widget properties.
   * @param properties 
   */
  set(properties: VideoProperties): this;

  /**
   * Returns the full length of the current video in milliseconds.
   */
  readonly duration: number;

  /**
   * Returns the current playback position in milliseconds. This property does not trigger any change
   * events.
   */
  readonly position: number;

  /**
   * Returns the current playback speed. The value `1` represents the natural speed of the video. When the
   * *[state](#state)* of the widget is not `play` this property always has the value `0`.
   */
  readonly speed: number;

  /**
   * The current state of the widget.
   */
  readonly state: "empty" | "fail" | "finish" | "open" | "pause" | "play" | "ready" | "stale";
}

// WebView

interface _WebViewProperties extends _WidgetProperties {

  /**
   * A complete HTML document to display. Always returns the last set value.
   */
  html: string;

  /**
   * The URL of the web page to display. Relative URLs are resolved relative to 'package.json'. Returns
   * empty string when content from *html* property is displayed.
   */
  url: string;
}
type WebViewProperties = Partial<_WebViewProperties>

interface WebViewEvents<T> extends WidgetEvents<T> {

  /**
   * Fired when the WebView requests a download. The download event provides the properties `url`,
   * `mimeType`, `contentLength` and `contentDisposition`. Supported only on Android.
   */
  download?: (event: {readonly contentDisposition: string, readonly contentLength: number, readonly mimeType: string, readonly target: T, readonly timeStamp: number, readonly type: string, readonly url: string}) => void;

  /**
   * Fired when the url has been loaded.
   */
  load?: (event: {readonly target: T, readonly timeStamp: number, readonly type: string}) => void;

  /**
   * Fired when a web message has been sent via `window.parent.postMessage(message, targetOrigin)` from
   * inside the `WebView`.
   */
  message?: (event: {readonly data: string, readonly target: T, readonly timeStamp: number, readonly type: string}) => void;

  /**
   * Fired when the WebView is about to navigate to a new URL.
   */
  navigate?: (event: {readonly preventDefault: () => void, readonly target: T, readonly timeStamp: number, readonly type: string, readonly url: string}) => void;
}

/**
 * A widget that can display a web page. Since this widget requires a lot of resources it's recommended
 * to have no more than one instance at a time.
 */
interface WebView extends _WebViewProperties {}
export class WebView extends Widget {

  public constructor(properties?: WebViewProperties);

  /**
   * Navigate the `WebView` to the previous page if possible.
   */
  goBack(): void;

  /**
   * Navigate the `WebView` to the next page if possible.
   */
  goForward(): void;

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: WebViewEvents<this>): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: WebViewEvents<this>): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: WebViewEvents<this>): this;

  /**
   * Posts a web message to the underlying `window` object of the WebView. The website in the `WebView`
   * can register for the message in the following fashion: `window.addEventListener('message',
   * callbackFunction)`. For more information see
   * [`Window.postMessage()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) API.
   * @param message The message to send. Currently supports only strings.
   * @param targetOrigin The URL of the page that receives the message. The message is only sent if the current document URL has the same scheme, domain and path. Use `*` to send to any URL.
   */
  postMessage(message: string, targetOrigin: string): this;

  /**
   * Sets the given property.
   * @param property 
   * @param value 
   */
  set(property: string, value: any): this;

  /**
   * Sets all key-value pairs in the properties object as widget properties.
   * @param properties 
   */
  set(properties: WebViewProperties): this;

  /**
   * Whether there is a previous to navigated to via `goBack()`.
   */
  readonly canGoBack: boolean;

  /**
   * Whether there is a next page to navigate to via `goForward()`.
   */
  readonly canGoForward: boolean;
}

// Widget

interface _WidgetProperties extends _NativeObjectProperties {

  /**
   * Background color of the widget.
   */
  background: Color;

  /**
   * An image to be displayed on the widget's background. If the image is smaller than the widget, it will
   * be tiled.
   */
  backgroundImage: Image;

  /**
   * The vertical position of the widget's baseline relative to a sibling widget.
   */
  baseline: Widget;

  /**
   * The position of the widget's bottom edge relative to the parent or a sibling widget.
   */
  bottom: margin;

  /**
   * The horizontal position of the widget's center relative to the parent's center.
   */
  centerX: offset;

  /**
   * The vertical position of the widget's center relative to the parent's center.
   */
  centerY: offset;

  /**
   * A class name or a whitespace separated list of class names to identify the widget. Class names are
   * arbitrary strings that describe a state or a category and help to select widgets using a selector
   * expression. A class name may only contain alphanumeric characters, `_` and `-`. Class names can also
   * be added or removed using the field `classList`.
   */
  class: string;

  /**
   * Provides convenient access to the list of class names set to this widget. Class names can either be
   * set using the `class` property or by modifying the `classList` directly.
   */
  classList: string[];

  /**
   * Configure a widget to have rounded corners. Each corner is affected equally. Supported on iOS and
   * Android 5.0+.
   */
  cornerRadius: number;

  /**
   * The position of the widget on the z-axis. Currently only supported on Android 5.0+.
   */
  elevation: number;

  /**
   * Whether the widget can be operated.
   */
  enabled: boolean;

  /**
   * The font used for the widget.
   */
  font: Font;

  /**
   * The height of the widget.
   */
  height: dimension;

  /**
   * Whether the entire widget should be highlighted while touched.
   */
  highlightOnTouch: boolean;

  /**
   * A string to identify the widget by using selectors. IDs are optional. It is strongly recommended that
   * they are unique within a page.
   */
  id: string;

  /**
   * Shorthand for all layout properties. See [Layout](../layout.md).
   */
  layoutData: LayoutData;

  /**
   * The position of the widget's left edge relative to the parent or a sibling widget.
   */
  left: margin;

  /**
   * Opacity of the entire widget, in the range `[0..1]`. Can be used for fade animations.
   */
  opacity: number;

  /**
   * The position of the widget's right edge relative to the parent or a sibling widget.
   */
  right: margin;

  /**
   * Text color of the widget.
   */
  textColor: Color;

  /**
   * The position of the widget's top edge relative to the parent or a sibling widget.
   */
  top: margin;

  /**
   * Modifications to the widget's shape, size, or position. Can be used for animations. **Note:** In
   * Android the *transform* property does not affect the *bounds* property, while it does so in iOS.
   */
  transform: Transformation;

  /**
   * Whether the widget is visible.
   */
  visible: boolean;

  /**
   * The width of the widget.
   */
  width: dimension;

  /**
   * Controls the color scheme used for this widget. When set to `"default"` the theme is inherited from
   * either the parent (if present) or the OS settings. Available only on windows.
   */
  win_theme: "dark" | "default" | "light";
}
type WidgetProperties = Partial<_WidgetProperties>

interface WidgetEvents<T> extends NativeObjectEvents<T> {

  /**
   * Fired when the widget is about to be disposed. At this point the widget and its children are still
   * accessible.
   */
  dispose?: (event: {readonly target: T, readonly timeStamp: number, readonly type: string}) => void;

  /**
   * Fired after pressing a widget for a specific amount of time (about a second), and again on lifting
   * the finger.
   */
  longpress?: (event: {readonly state: 'start'|'end'|'cancel', readonly target: T, readonly timeStamp: number, readonly touches: {x: number, y: number}[], readonly type: string}) => void;

  /**
   * Fired continuously after a finger touching the widget moved for a certain distance.
   */
  pan?: (event: {readonly state: 'start'|'change'|'end'|'cancel', readonly target: T, readonly timeStamp: number, readonly touches: {x: number, y: number}[], readonly translationX: number, readonly translationY: number, readonly type: string, readonly velocityX: number, readonly velocityY: number}) => void;

  /**
   * Fired when a finger starts moving down.
   */
  panDown?: (event: {readonly state: 'start'|'change'|'end'|'cancel', readonly target: T, readonly timeStamp: number, readonly touches: {x: number, y: number}[], readonly translationX: number, readonly translationY: number, readonly type: string, readonly velocityX: number, readonly velocityY: number}) => void;

  /**
   * Fired when a finger starts moving left or right.
   */
  panHorizontal?: (event: {readonly state: 'start'|'change'|'end'|'cancel', readonly target: T, readonly timeStamp: number, readonly touches: {x: number, y: number}[], readonly translationX: number, readonly translationY: number, readonly type: string, readonly velocityX: number, readonly velocityY: number}) => void;

  /**
   * Fired when a finger starts moving left.
   */
  panLeft?: (event: {readonly state: 'start'|'change'|'end'|'cancel', readonly target: T, readonly timeStamp: number, readonly touches: {x: number, y: number}[], readonly translationX: number, readonly translationY: number, readonly type: string, readonly velocityX: number, readonly velocityY: number}) => void;

  /**
   * Fired when a finger starts moving right.
   */
  panRight?: (event: {readonly state: 'start'|'change'|'end'|'cancel', readonly target: T, readonly timeStamp: number, readonly touches: {x: number, y: number}[], readonly translationX: number, readonly translationY: number, readonly type: string, readonly velocityX: number, readonly velocityY: number}) => void;

  /**
   * Fired when a finger starts moving up.
   */
  panUp?: (event: {readonly state: 'start'|'change'|'end'|'cancel', readonly target: T, readonly timeStamp: number, readonly touches: {x: number, y: number}[], readonly translationX: number, readonly translationY: number, readonly type: string, readonly velocityX: number, readonly velocityY: number}) => void;

  /**
   * Fired when a finger starts moving up or down.
   */
  panVertical?: (event: {readonly state: 'start'|'change'|'end'|'cancel', readonly target: T, readonly timeStamp: number, readonly touches: {x: number, y: number}[], readonly translationX: number, readonly translationY: number, readonly type: string, readonly velocityX: number, readonly velocityY: number}) => void;

  /**
   * Fired when the widget's size has changed. You can use this event to apply new
   * [*layoutData*](#layoutdata).
   */
  resize?: (event: {readonly height: number, readonly left: number, readonly target: T, readonly timeStamp: number, readonly top: number, readonly type: string, readonly width: number}) => void;

  /**
   * Fired when a finger moves down quickly.
   */
  swipeDown?: (event: {readonly target: T, readonly timeStamp: number, readonly touches: {x: number, y: number}[], readonly type: string}) => void;

  /**
   * Fired when a finger moves left quickly.
   */
  swipeLeft?: (event: {readonly target: T, readonly timeStamp: number, readonly touches: {x: number, y: number}[], readonly type: string}) => void;

  /**
   * Fired when a finger moves right quickly.
   */
  swipeRight?: (event: {readonly target: T, readonly timeStamp: number, readonly touches: {x: number, y: number}[], readonly type: string}) => void;

  /**
   * Fired when a finger moves up quickly.
   */
  swipeUp?: (event: {readonly target: T, readonly timeStamp: number, readonly touches: {x: number, y: number}[], readonly type: string}) => void;

  /**
   * Fired once when a finger briefly touched the widget.
   */
  tap?: (event: {readonly target: T, readonly timeStamp: number, readonly touches: {x: number, y: number}[], readonly type: string}) => void;

  /**
   * Fired instead of touchEnd when the touch ends on another widget than it started on.
   */
  touchCancel?: (event: {readonly target: T, readonly timeStamp: number, readonly touches: {x: number, y: number, absoluteX: number, absoluteY: number}[], readonly type: string}) => void;

  /**
   * Fired when a touch ends on the same widget than it started on.
   */
  touchEnd?: (event: {readonly target: T, readonly timeStamp: number, readonly touches: {x: number, y: number, absoluteX: number, absoluteY: number}[], readonly type: string}) => void;

  /**
   * Fired repeatedly while swiping across the screen.
   */
  touchMove?: (event: {readonly target: T, readonly timeStamp: number, readonly touches: {x: number, y: number, absoluteX: number, absoluteY: number}[], readonly type: string}) => void;

  /**
   * Fired when a widget is touched. See [Touch Events](../touch.md).
   */
  touchStart?: (event: {readonly target: T, readonly timeStamp: number, readonly touches: {x: number, y: number, absoluteX: number, absoluteY: number}[], readonly type: string}) => void;
}

/**
 * Base class for all widgets
 */
interface Widget extends _WidgetProperties {}
export class Widget extends NativeObject {

  protected constructor(properties?: WidgetProperties);

  /**
   * Starts an animation that transforms the given properties from their current values to the given ones.
   * Supported properties are *transform* and *opacity*. Returns a promise that is resolved once the
   * animation is completed and is rejected if the animation is aborted.
   * @param properties The properties and target values to animate.
   * @param options Configures the animation itself.
   */
  animate(properties: {transform?: Transformation, opacity?: number}, options: AnimationOptions): Promise<any>;

  /**
   * Appends this widget to the given parent. The parent widget must support children (extending
   * *Composite*). If the widget already has a parent, it is removed from the old parent.
   * @param parent 
   */
  appendTo(parent: Composite): this;

  /**
   * Applies the given properties to all descendants that match the associated selector(s).
   * @param properties An object in the format `{Selector: {property: value, property: value, ... }, Selector: ...}`
   */
  apply(properties: {[selector: string]: WidgetProperties & {[k: string]: any}}): this;

  /**
   * Returns a (possibly empty) collection of all children of this widget that match the given selector.
   * @param selector A selector expression or a predicate function to filter the results.
   */
  children(selector?: Selector): WidgetCollection;

  /**
   * Removes this widget from its parent.
   */
  detach(): this;

  /**
   * Removes this widget from its parent and destroys it. Also disposes of all its children. Triggers a
   * `remove` event on the parent and a `dispose` event on itself. The widget can no longer be used.
   */
  dispose(): void;

  /**
   * Returns a (possibly empty) collection of all descendants of this widget that match the given
   * selector.
   * @param selector A selector expression or a predicate function to filter the results.
   */
  find(selector?: Selector): WidgetCollection;

  /**
   * Inserts this widget directly after the given widget. If the widget already has a parent, it is
   * removed from the old parent.
   * @param widget 
   */
  insertAfter(widget: Widget): this;

  /**
   * Inserts this widget directly before the given widget. If the widget already has a parent, it is
   * removed from the old parent.
   * @param widget 
   */
  insertBefore(widget: Widget): this;

  /**
   * Returns `true` if the widget has been disposed, otherwise `false`.
   */
  isDisposed(): boolean;

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: WidgetEvents<this>): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: WidgetEvents<this>): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: Object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: WidgetEvents<this>): this;

  /**
   * Returns the parent of this widget or `null` if this widget is not appended to a parent.
   */
  parent(): Composite;

  /**
   * Sets the given property.
   * @param property 
   * @param value 
   */
  set(property: string, value: any): this;

  /**
   * Sets all key-value pairs in the properties object as widget properties.
   * @param properties 
   */
  set(properties: WidgetProperties): this;

  /**
   * Returns a (possibly empty) collection of all siblings of this widget that match the given selector.
   * @param selector A selector expression or a predicate function to filter the results.
   */
  siblings(selector?: Selector): WidgetCollection;

  /**
   * The actual location and size of the widget, relative to its parent.
   */
  readonly bounds: Bounds;
}

// Timer

/**
 * The object `window` is the global object. All fields of windows are also global variables and vice
 * versa. For compatibility it is also known as `global` and `self`.
 */
export class Timer {

  /**
   * Cancels the running interval associated with the given ID. When given an invalid ID, nothing happens.
   * @param id The ID that was returned by `setInterval`.
   */
  clearInterval(id: any): void;

  /**
   * Cancels the running timeout associated with the given ID. When given an invalid ID, nothing happens.
   * @param id The ID that was returned by `setTimeout`.
   */
  clearTimeout(id: any): void;

  /**
   * Calls the given function repeatedly, each times waiting the given delay. The actual delay may be
   * slightly longer than the given one.
   * @param callback The function to call.
   * @param delay The delay in milliseconds.
   * @param ...params One or more values passed on to the callback.
   */
  setInterval(callback: Function, delay?: number, ...params: any[]): any;

  /**
   * Calls the given function with `param` (and all following parameters) after the specified delay. The
   * actual delay may be slightly longer than the given one.
   * @param callback The function to call.
   * @param delay The delay in milliseconds.
   * @param ...params One or more values passed on to the callback.
   */
  setTimeout(callback: Function, delay?: number, ...params: any[]): any;
}

declare let window: Timer;

